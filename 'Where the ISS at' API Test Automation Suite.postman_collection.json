{
	"info": {
		"_postman_id": "8f683135-9369-4f6b-a620-2f3afdc316c0",
		"name": "'Where the ISS at' API Test Automation Suite",
		"description": "This collection is an API test suite for the 2 API calls -\n\n-satellites/[id]/positions\n\n-satellites/[id]/tles \n\nThe first API call, /satellites/[id], is used to get the latest information of the satellite. \n\nBased on the timestamp, the data is then compared with the other 2 API calls to verify if the response matches the response of /satellites/[id].\n\nNote: The ID of the Satellite is added as a Collection Variable.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Satellite",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"//Capturing the response by Creating/Updating the global variables \r",
							"pm.globals.set(\"timestamp\", jsonData.timestamp);\r",
							"pm.globals.set(\"latitude\", jsonData.latitude);\r",
							"pm.globals.set(\"longitude\", jsonData.longitude);\r",
							"pm.globals.set(\"altitude\", jsonData.altitude);\r",
							"pm.globals.set(\"velocity\", jsonData.velocity);\r",
							"pm.globals.set(\"visibility\", jsonData.visibility);\r",
							"pm.globals.set(\"footprint\", jsonData.footprint);\r",
							"pm.globals.set(\"daynum\", jsonData.daynum);\r",
							"pm.globals.set(\"solar_lat\", jsonData.solar_lat);\r",
							"pm.globals.set(\"solar_lon\", jsonData.solar_lon);\r",
							"pm.globals.set(\"units\", jsonData.units);\r",
							"pm.globals.set(\"name\", jsonData.name);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseURL}}/{{ID}}",
					"host": [
						"{{BaseURL}}"
					],
					"path": [
						"{{ID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Satellite - Wrong Satellite ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"responseJson = JSON.parse(responseBody);\r",
							"\r",
							"pm.test(\"Verify the error message\", function () {\r",
							"    pm.expect(responseJson.error).to.eq(\"satellite not found\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseURL}}/{{WrongID}}",
					"host": [
						"{{BaseURL}}"
					],
					"path": [
						"{{WrongID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Positions",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Verify that the response format is Json\", function () {\r",
							"   pm.response.to.have.header(\"Content-Type\");\r",
							"   pm.response.to.be.header(\"Content-Type\", \"application/json\");\r",
							"});\r",
							"\r",
							"responseJson = JSON.parse(responseBody);\r",
							"\r",
							"var a=[];\r",
							"var list = (responseJson).length;\r",
							"console.log(list)\r",
							"\r",
							"for (var i = 0; i < list; i++) \r",
							"{\r",
							"var counter = responseJson[i];\r",
							"schID=counter.visibility ;\r",
							"a.push(schID);\r",
							"}\r",
							"console.log(a);\r",
							"\r",
							"pm.test(\"Verify that the response is not an empty JSON array\", function () {\r",
							"    var jsonData = JSON.parse(responseBody);\r",
							"   pm.expect(jsonData).to.not.null\r",
							"});\r",
							"\r",
							"pm.test(\"Verify that ID contains only digits \", function () {\r",
							"    var jsonData = JSON.parse(responseBody);\r",
							"    for (var i = 0; i < jsonData.length; i++) \r",
							"   { \r",
							"       let isnum = /^\\d+$/.test(jsonData[i].id);   \r",
							"        if(!isnum)\r",
							"        pm.expect.fail(\"The ID contains other characters than digits\")\r",
							"    }\r",
							"\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"pm.test(\"Verify that the name value matches with the Satellite data\", function () {\r",
							"    var jsonData = JSON.parse(responseBody);\r",
							"    for (var i = 0; i < jsonData.length; i++) \r",
							"    pm.expect(jsonData[i].name).to.eq(globals[\"name\"]);\r",
							"});\r",
							"\r",
							"pm.test(\"Verify that the latitude value matches with the Satellite data\", function () {\r",
							"    var jsonData = JSON.parse(responseBody);\r",
							"    for (var i = 0; i < jsonData.length; i++) \r",
							"    pm.expect(jsonData[i].latitude).to.eq(globals[\"latitude\"]);\r",
							"});\r",
							"\r",
							"pm.test(\"Verify that the longitude value matches with the Satellite data\", function () {\r",
							"    var jsonData = JSON.parse(responseBody);\r",
							"    for (var i = 0; i < jsonData.length; i++) \r",
							"    pm.expect(jsonData[i].longitude).to.eq(globals[\"longitude\"]);\r",
							"});\r",
							"pm.test(\"Verify that the altitude value matches with the Satellite data\", function () {\r",
							"    var jsonData = JSON.parse(responseBody);\r",
							"    for (var i = 0; i < jsonData.length; i++) \r",
							"    pm.expect(jsonData[i].altitude).to.eq(globals[\"altitude\"]);\r",
							"});\r",
							"pm.test(\"Verify that the velocity value matches with the Satellite data\", function () {\r",
							"    var jsonData = JSON.parse(responseBody);\r",
							"    for (var i = 0; i < jsonData.length; i++) \r",
							"    pm.expect(jsonData[i].velocity).to.eq(globals[\"velocity\"]);\r",
							"});\r",
							"pm.test(\"Verify that the visibility value matches with the Satellite data\", function () {\r",
							"    var jsonData = JSON.parse(responseBody);\r",
							"    for (var i = 0; i < jsonData.length; i++) \r",
							"    pm.expect(jsonData[i].visibility).to.eq(globals[\"visibility\"]);\r",
							"});\r",
							"pm.test(\"Verify that the footprint value matches with the Satellite data\", function () {\r",
							"    var jsonData = JSON.parse(responseBody);\r",
							"    for (var i = 0; i < jsonData.length; i++) \r",
							"    pm.expect(jsonData[i].footprint).to.eq(globals[\"footprint\"]);\r",
							"});\r",
							"pm.test(\"Verify that the timestamp value matches with the Satellite data\", function () {\r",
							"    var jsonData = JSON.parse(responseBody);\r",
							"    for (var i = 0; i < jsonData.length; i++) \r",
							"    pm.expect(jsonData[i].timestamp).to.eq(globals[\"timestamp\"]);\r",
							"});\r",
							"pm.test(\"Verify that the daynum value matches with the Satellite data\", function () {\r",
							"    var jsonData = JSON.parse(responseBody);\r",
							"    for (var i = 0; i < jsonData.length; i++) \r",
							"    pm.expect(jsonData[i].daynum).to.eq(globals[\"daynum\"]);\r",
							"});\r",
							"pm.test(\"Verify that the solar_lat value matches with the Satellite data\", function () {\r",
							"    var jsonData = JSON.parse(responseBody);\r",
							"    for (var i = 0; i < jsonData.length; i++) \r",
							"    pm.expect(jsonData[i].solar_lat).to.eq(globals[\"solar_lat\"]);\r",
							"});\r",
							"pm.test(\"Verify that the solar_lon value matches with the Satellite data\", function () {\r",
							"    var jsonData = JSON.parse(responseBody);\r",
							"    for (var i = 0; i < jsonData.length; i++) \r",
							"    pm.expect(jsonData[i].solar_lon).to.eq(globals[\"solar_lon\"]);\r",
							"});\r",
							"pm.test(\"Verify that the units value matches with the Satellite data\", function () {\r",
							"    var jsonData = JSON.parse(responseBody);\r",
							"    for (var i = 0; i < jsonData.length; i++) \r",
							"    pm.expect(jsonData[i].units).to.eq(globals[\"units\"]);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseURL}}/{{ID}}/positions?timestamps={{timestamp}}",
					"host": [
						"{{BaseURL}}"
					],
					"path": [
						"{{ID}}",
						"positions"
					],
					"query": [
						{
							"key": "timestamps",
							"value": "{{timestamp}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Positions - in Miles",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Verify that the response format is Json\", function () {\r",
							"   pm.response.to.have.header(\"Content-Type\");\r",
							"   pm.response.to.be.header(\"Content-Type\", \"application/json\");\r",
							"});\r",
							"\r",
							"responseJson = JSON.parse(responseBody);\r",
							"\r",
							"var a=[];\r",
							"var list = (responseJson).length;\r",
							"console.log(list)\r",
							"\r",
							"for (var i = 0; i < list; i++) \r",
							"{\r",
							"var counter = responseJson[i];\r",
							"schID=counter.visibility ;\r",
							"a.push(schID);\r",
							"}\r",
							"console.log(a);\r",
							"\r",
							"pm.test(\"Verify that the response is not an empty JSON array\", function () {\r",
							"    var jsonData = JSON.parse(responseBody);\r",
							"   pm.expect(jsonData).to.not.null\r",
							"});\r",
							"\r",
							"pm.test(\"Verify that ID contains only digits \", function () {\r",
							"    var jsonData = JSON.parse(responseBody);\r",
							"    for (var i = 0; i < jsonData.length; i++) \r",
							"   { \r",
							"       let isnum = /^\\d+$/.test(jsonData[i].id);   \r",
							"        if(!isnum)\r",
							"        pm.expect.fail(\"The ID contains other characters than digits\")\r",
							"    }\r",
							"\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"pm.test(\"Verify that the name value matches with the Satellite data\", function () {\r",
							"    var jsonData = JSON.parse(responseBody);\r",
							"    for (var i = 0; i < jsonData.length; i++) \r",
							"    pm.expect(jsonData[i].name).to.eq(globals[\"name\"]);\r",
							"});\r",
							"\r",
							"pm.test(\"Verify that the latitude value matches with the Satellite data\", function () {\r",
							"    var jsonData = JSON.parse(responseBody);\r",
							"    for (var i = 0; i < jsonData.length; i++) \r",
							"    pm.expect(jsonData[i].latitude).to.eq(globals[\"latitude\"]);\r",
							"});\r",
							"\r",
							"pm.test(\"Verify that the longitude value matches with the Satellite data\", function () {\r",
							"    var jsonData = JSON.parse(responseBody);\r",
							"    for (var i = 0; i < jsonData.length; i++) \r",
							"    pm.expect(jsonData[i].longitude).to.eq(globals[\"longitude\"]);\r",
							"});\r",
							"pm.test(\"Verify that the altitude value matches with the Satellite data\", function () {\r",
							"    var jsonData = JSON.parse(responseBody);\r",
							"    for (var i = 0; i < jsonData.length; i++) \r",
							"    pm.expect(jsonData[i].altitude).to.eq(globals[\"altitude\"]);\r",
							"});\r",
							"pm.test(\"Verify that the velocity value matches with the Satellite data\", function () {\r",
							"    var jsonData = JSON.parse(responseBody);\r",
							"    for (var i = 0; i < jsonData.length; i++) \r",
							"    pm.expect(jsonData[i].velocity).to.eq(globals[\"velocity\"]);\r",
							"});\r",
							"pm.test(\"Verify that the visibility value matches with the Satellite data\", function () {\r",
							"    var jsonData = JSON.parse(responseBody);\r",
							"    for (var i = 0; i < jsonData.length; i++) \r",
							"    pm.expect(jsonData[i].visibility).to.eq(globals[\"visibility\"]);\r",
							"});\r",
							"pm.test(\"Verify that the footprint value matches with the Satellite data\", function () {\r",
							"    var jsonData = JSON.parse(responseBody);\r",
							"    for (var i = 0; i < jsonData.length; i++) \r",
							"    pm.expect(jsonData[i].footprint).to.eq(globals[\"footprint\"]);\r",
							"});\r",
							"pm.test(\"Verify that the timestamp value matches with the Satellite data\", function () {\r",
							"    var jsonData = JSON.parse(responseBody);\r",
							"    for (var i = 0; i < jsonData.length; i++) \r",
							"    pm.expect(jsonData[i].timestamp).to.eq(globals[\"timestamp\"]);\r",
							"});\r",
							"pm.test(\"Verify that the daynum value matches with the Satellite data\", function () {\r",
							"    var jsonData = JSON.parse(responseBody);\r",
							"    for (var i = 0; i < jsonData.length; i++) \r",
							"    pm.expect(jsonData[i].daynum).to.eq(globals[\"daynum\"]);\r",
							"});\r",
							"pm.test(\"Verify that the solar_lat value matches with the Satellite data\", function () {\r",
							"    var jsonData = JSON.parse(responseBody);\r",
							"    for (var i = 0; i < jsonData.length; i++) \r",
							"    pm.expect(jsonData[i].solar_lat).to.eq(globals[\"solar_lat\"]);\r",
							"});\r",
							"pm.test(\"Verify that the solar_lon value matches with the Satellite data\", function () {\r",
							"    var jsonData = JSON.parse(responseBody);\r",
							"    for (var i = 0; i < jsonData.length; i++) \r",
							"    pm.expect(jsonData[i].solar_lon).to.eq(globals[\"solar_lon\"]);\r",
							"});\r",
							"pm.test(\"Verify that the units value matches with the Satellite data\", function () {\r",
							"    var jsonData = JSON.parse(responseBody);\r",
							"    for (var i = 0; i < jsonData.length; i++) \r",
							"    pm.expect(jsonData[i].units).to.eq(globals[\"units\"]);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseURL}}/{{ID}}/positions?timestamps={{timestamp}}",
					"host": [
						"{{BaseURL}}"
					],
					"path": [
						"{{ID}}",
						"positions"
					],
					"query": [
						{
							"key": "timestamps",
							"value": "{{timestamp}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Positions - Wrong Satellite ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"responseJson = JSON.parse(responseBody);\r",
							"\r",
							"pm.test(\"Verify the error message\", function () {\r",
							"    pm.expect(responseJson.error).to.eq(\"satellite not found\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseURL}}/{{WrongID}}/positions?timestamps={{timestamp}}",
					"host": [
						"{{BaseURL}}"
					],
					"path": [
						"{{WrongID}}",
						"positions"
					],
					"query": [
						{
							"key": "timestamps",
							"value": "{{timestamp}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "TLES",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Verify that the response format is Json\", function () {\r",
							"   pm.response.to.have.header(\"Content-Type\");\r",
							"   pm.response.to.be.header(\"Content-Type\", \"application/json\");\r",
							"});\r",
							"\r",
							"pm.test(\"tle_timestamp should not be null\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.tle_timestamp).to.not.null\r",
							"});\r",
							"\r",
							"pm.test(\"tle_timestamp can be converted into a humanly readable format\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.tle_timestamp).to.not.eq(\"\");\r",
							"    var time = jsonData.tle_timestamp;\r",
							"    var moment = require(\"moment\")\r",
							"    console.log(moment(time).format(\"MM/DD/YYYY\"))\r",
							"});\r",
							"\r",
							"pm.test(\"Verify the length of ID \", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.id.length).to.eq(5); \r",
							"});\r",
							"\r",
							"pm.test(\"Verify that ID contains only digits \", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    let isnum = /^\\d+$/.test(jsonData.id);   \r",
							"    if(!isnum)\r",
							"    pm.expect.fail(\"The ID contains other characters than digits\")\r",
							"});\r",
							"\r",
							"pm.test(\"Verify that name should be 'iss' \", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.name).to.eq('iss'); \r",
							"});\r",
							"\r",
							"pm.test(\"Verify that header should be 'ISS (ZARYA)' \", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.header).to.eq('ISS (ZARYA)'); \r",
							"});\r",
							"\r",
							"pm.test(\"Verify the content of 'line1'\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.line1).to.eq('1 25544U 98067A   21301.00322917  .00003431  00000-0  70877-4 0  9995'); \r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Verify the content of 'line2'\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.line2).to.eq('2 25544  51.6444  45.9958 0003883 145.6466 188.4099 15.48807975309173'); \r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseURL}}/{{ID}}/tles",
					"host": [
						"{{BaseURL}}"
					],
					"path": [
						"{{ID}}",
						"tles"
					]
				}
			},
			"response": []
		},
		{
			"name": "TLES - Format - Text",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Verify that the response format is text\", function () {\r",
							"   pm.response.to.have.header(\"Content-Type\");\r",
							"   pm.response.to.be.header(\"Content-Type\", \"text/plain\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseURL}}/{{ID}}/tles?format=text",
					"host": [
						"{{BaseURL}}"
					],
					"path": [
						"{{ID}}",
						"tles"
					],
					"query": [
						{
							"key": "format",
							"value": "text"
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "ID",
			"value": "25544"
		},
		{
			"key": "BaseURL",
			"value": "https://api.wheretheiss.at/v1/satellites"
		}
	]
}